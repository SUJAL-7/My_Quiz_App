name: CI/CD Deploy (Quiz App)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout repo
      - name: Checkout
        uses: actions/checkout@v4

      # 2️⃣ Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3️⃣ Build & Push API Image
      - name: Build & Push API Image
        uses: docker/build-push-action@v6
        with:
          context: ./quiz-app-server
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/quiz-api:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/quiz-api:${{ github.sha }}
          platforms: linux/amd64

      # 4️⃣ Build & Push Client Image
      - name: Build & Push Client Image
        uses: docker/build-push-action@v6
        with:
          context: ./quiz-app-client
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/quiz-client:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/quiz-client:${{ github.sha }}
          platforms: linux/amd64

      # 5️⃣ Deploy to EC2
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            set -e
            REPO_DIR="$HOME/My_Quiz_App"
            IMAGE_TAG="${GITHUB_SHA}"

            # Clone once if not present
            if [ ! -d "$REPO_DIR/.git" ]; then
              git clone https://github.com/SUJAL-7/My_Quiz_App.git "$REPO_DIR"
            fi

            cd "$REPO_DIR"
            git checkout main
            git pull --ff-only

            # Ensure .env exists
            if [ ! -f quiz-app-server/.env ]; then
              echo "ERROR: quiz-app-server/.env missing on server."
              exit 1
            fi

            # Pull the newly built images using SHA tag
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/quiz-api:${GITHUB_SHA}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/quiz-client:${GITHUB_SHA}

            # Update docker-compose.yml to use SHA-tagged images
            docker compose down
            docker compose up -d
            docker compose ps
